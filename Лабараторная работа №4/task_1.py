# TODO: описать базовый класс
class Animal:
    """
    Базовый класс для описания животных.
    """
    def __init__(self, name: str, habitat: str):
        """
        Конструктор базового класса.

        :param name: Название животного.
        :param habitat: Среда обитания животного.
        """
        self.name = name
        self.habitat = habitat

    def __str__(self) -> str:
        """
        Возвращает строковое представление объекта.
        """
        return f"{self.name} обитает в {self.habitat}"

    def __repr__(self) -> str:
        """
        Возвращает техническое представление объекта.
        """
        return f"Animal(name={self.name!r}, habitat={self.habitat!r})"

    def sound(self) -> str:
        """
        Возвращает звук, который издает животное. Этот метод перегружен в дочерних классах.
        """
        return "Неизвестный звук"

    def type(self) -> str:
        """
        Метод определяет тип животного в пищевой цепи по названию животного
        Должен сравнивать с имеющейся базой данных и возвращать результат
        :return: str объект обозначающий тип животного например Консумент 1 порядка
        """
        pass

# TODO: описать дочерний класс
class Mammal(Animal):
    """
    Класс, описывающий млекопитающих.
    """

    def __init__(self, name: str, habitat: str, has_fur: bool):
        """
        Конструктор для млекопитающих.

        :param name: Название млекопитающего.
        :param habitat: Среда обитания млекопитающего.
        :param has_fur: Есть ли шерсть у млекопитающего.
        """
        super().__init__(name, habitat)
        self.has_fur = has_fur  # Перегрузка конструктора с добавлением параметра наличия шерсти

    # Перегрузка метода базового класса str
    def __str__(self) -> str:
        """
        Возвращает строковое представление объекта, включая информацию о шерсти.
        """
        fur_info = "имеет шерсть" if self.has_fur else "не имеет шерсти"
        return f"{self.name} ({fur_info}), обитает в {self.habitat}"

    # Перегрузка метода repr
    def __repr__(self) -> str:
        """
        Возвращает техническое представление объекта.
        """
        return f"Animal(name={self.name!r}, habitat={self.habitat!r}, has_fur={self.has_fur!r})"

    # Метод sound перегружен в дочернем классе,
    # чтобы отражать конкретное поведение видов животных.
    # Это полезно для повышения логики и читаемости кода

    def sound(self) -> str:
        """
        Перегруженный метод, возвращающий звук для млекопитающего.
        """
        return "Рычание или мяуканье (в зависимости от вида)"

    # Метод type полностью наследуется у базового класса
